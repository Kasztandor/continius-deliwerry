name: Publish to PyPI

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-test'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Extract version from tag
      id: get_version
      run: |
        # Remove 'v' prefix and '-test' suffix
        TAG=${GITHUB_REF#refs/tags/v}
        VERSION=${TAG%-test}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine

    - name: Create pyproject.toml for build
      run: |
        echo "[build-system]" > pyproject.toml
        echo "requires = ['setuptools>=42', 'wheel']" >> pyproject.toml
        echo "build-backend = 'setuptools.build_meta'" >> pyproject.toml
        echo "" >> pyproject.toml
        echo "[project]" >> pyproject.toml
        echo "name = 'attendance-manager'" >> pyproject.toml
        echo "version = '${{ env.VERSION }}'" >> pyproject.toml
        echo "description = 'A Python application for managing attendance and student data.'" >> pyproject.toml
        echo "readme = 'README.md'" >> pyproject.toml
        echo "license = { file = 'LICENSE' }" >> pyproject.toml
        echo "authors = [{ name = 'Your Name', email = 'your.email@example.com' }]" >> pyproject.toml
        echo "" >> pyproject.toml
        echo "[tool.setuptools]" >> pyproject.toml
        echo "packages = ['dist']" >> pyproject.toml
        echo "include-package-data = true" >> pyproject.toml
        echo "package-data = { '': ['dist/main.py'] }" >> pyproject.toml
    
    - name: Build distribution
      run: |
        python -m build
      env:
        PACKAGE_VERSION: ${{ env.VERSION }}

    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TWINE_TEST_PASSWORD }}
      run: |
        python -m twine upload dist/*
